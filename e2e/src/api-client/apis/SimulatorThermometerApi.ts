/* tslint:disable */
/* eslint-disable */
/**
 * Example API Doc
 * Describe your API
 *
 * The version of the OpenAPI document: SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SimulatorCreateThermometerRequest,
  SimulatorCreateThermometerResponse,
  SimulatorEngineSwitchResponse,
  SimulatorGetTMHistoryResponse,
  SimulatorGetThermometerResponse,
  SimulatorListThermometersResponse,
  SimulatorUpdateThermometerConfigRequest,
  SimulatorUpdateThermometerConfigResponse,
} from '../models/index';
import {
    SimulatorCreateThermometerRequestFromJSON,
    SimulatorCreateThermometerRequestToJSON,
    SimulatorCreateThermometerResponseFromJSON,
    SimulatorCreateThermometerResponseToJSON,
    SimulatorEngineSwitchResponseFromJSON,
    SimulatorEngineSwitchResponseToJSON,
    SimulatorGetTMHistoryResponseFromJSON,
    SimulatorGetTMHistoryResponseToJSON,
    SimulatorGetThermometerResponseFromJSON,
    SimulatorGetThermometerResponseToJSON,
    SimulatorListThermometersResponseFromJSON,
    SimulatorListThermometersResponseToJSON,
    SimulatorUpdateThermometerConfigRequestFromJSON,
    SimulatorUpdateThermometerConfigRequestToJSON,
    SimulatorUpdateThermometerConfigResponseFromJSON,
    SimulatorUpdateThermometerConfigResponseToJSON,
} from '../models/index';

export interface GetSimulatorThermometerIdRequest {
    id: string;
}

export interface GetSimulatorThermometerIdHistoryRequest {
    id: string;
}

export interface PostSimulatorThermometerRequest {
    body: SimulatorCreateThermometerRequest;
}

export interface PostSimulatorThermometerIdStartRequest {
    id: string;
}

export interface PostSimulatorThermometerIdStopRequest {
    id: string;
}

export interface PutSimulatorThermometerIdConfigRequest {
    id: string;
    body: SimulatorUpdateThermometerConfigRequest;
}

/**
 * 
 */
export class SimulatorThermometerApi extends runtime.BaseAPI {

    /**
     * List thermometers
     * List thermometers
     */
    async getSimulatorThermometerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatorListThermometersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/simulator/thermometer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulatorListThermometersResponseFromJSON(jsonValue));
    }

    /**
     * List thermometers
     * List thermometers
     */
    async getSimulatorThermometer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatorListThermometersResponse> {
        const response = await this.getSimulatorThermometerRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get thermometer
     * Get thermometer
     */
    async getSimulatorThermometerIdRaw(requestParameters: GetSimulatorThermometerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatorGetThermometerResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSimulatorThermometerId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/simulator/thermometer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulatorGetThermometerResponseFromJSON(jsonValue));
    }

    /**
     * Get thermometer
     * Get thermometer
     */
    async getSimulatorThermometerId(requestParameters: GetSimulatorThermometerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatorGetThermometerResponse> {
        const response = await this.getSimulatorThermometerIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get thermometer history
     * Get thermometer history
     */
    async getSimulatorThermometerIdHistoryRaw(requestParameters: GetSimulatorThermometerIdHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatorGetTMHistoryResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSimulatorThermometerIdHistory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/simulator/thermometer/{id}/history`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulatorGetTMHistoryResponseFromJSON(jsonValue));
    }

    /**
     * Get thermometer history
     * Get thermometer history
     */
    async getSimulatorThermometerIdHistory(requestParameters: GetSimulatorThermometerIdHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatorGetTMHistoryResponse> {
        const response = await this.getSimulatorThermometerIdHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create thermometer
     * Create thermometer
     */
    async postSimulatorThermometerRaw(requestParameters: PostSimulatorThermometerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatorCreateThermometerResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling postSimulatorThermometer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/simulator/thermometer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SimulatorCreateThermometerRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulatorCreateThermometerResponseFromJSON(jsonValue));
    }

    /**
     * Create thermometer
     * Create thermometer
     */
    async postSimulatorThermometer(requestParameters: PostSimulatorThermometerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatorCreateThermometerResponse> {
        const response = await this.postSimulatorThermometerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start thermometer engine
     * Start thermometer engine
     */
    async postSimulatorThermometerIdStartRaw(requestParameters: PostSimulatorThermometerIdStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatorEngineSwitchResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postSimulatorThermometerIdStart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/simulator/thermometer/{id}/start`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulatorEngineSwitchResponseFromJSON(jsonValue));
    }

    /**
     * Start thermometer engine
     * Start thermometer engine
     */
    async postSimulatorThermometerIdStart(requestParameters: PostSimulatorThermometerIdStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatorEngineSwitchResponse> {
        const response = await this.postSimulatorThermometerIdStartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop thermometer engine
     * Stop thermometer engine
     */
    async postSimulatorThermometerIdStopRaw(requestParameters: PostSimulatorThermometerIdStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatorEngineSwitchResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postSimulatorThermometerIdStop().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/simulator/thermometer/{id}/stop`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulatorEngineSwitchResponseFromJSON(jsonValue));
    }

    /**
     * Stop thermometer engine
     * Stop thermometer engine
     */
    async postSimulatorThermometerIdStop(requestParameters: PostSimulatorThermometerIdStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatorEngineSwitchResponse> {
        const response = await this.postSimulatorThermometerIdStopRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update thermometer config
     * Update thermometer config
     */
    async putSimulatorThermometerIdConfigRaw(requestParameters: PutSimulatorThermometerIdConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatorUpdateThermometerConfigResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putSimulatorThermometerIdConfig().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling putSimulatorThermometerIdConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/simulator/thermometer/{id}/config`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SimulatorUpdateThermometerConfigRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulatorUpdateThermometerConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update thermometer config
     * Update thermometer config
     */
    async putSimulatorThermometerIdConfig(requestParameters: PutSimulatorThermometerIdConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatorUpdateThermometerConfigResponse> {
        const response = await this.putSimulatorThermometerIdConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
