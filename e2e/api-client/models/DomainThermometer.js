"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Example API Doc
 * Describe your API
 *
 * The version of the OpenAPI document: SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfDomainThermometer = instanceOfDomainThermometer;
exports.DomainThermometerFromJSON = DomainThermometerFromJSON;
exports.DomainThermometerFromJSONTyped = DomainThermometerFromJSONTyped;
exports.DomainThermometerToJSON = DomainThermometerToJSON;
exports.DomainThermometerToJSONTyped = DomainThermometerToJSONTyped;
var DomainThermometerConfig_1 = require("./DomainThermometerConfig");
/**
 * Check if a given object implements the DomainThermometer interface.
 */
function instanceOfDomainThermometer(value) {
    return true;
}
function DomainThermometerFromJSON(json) {
    return DomainThermometerFromJSONTyped(json, false);
}
function DomainThermometerFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'config': json['config'] == null ? undefined : (0, DomainThermometerConfig_1.DomainThermometerConfigFromJSON)(json['config']),
        'connected': json['connected'] == null ? undefined : json['connected'],
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'id': json['id'] == null ? undefined : json['id'],
        'ipAddress': json['ip_address'] == null ? undefined : json['ip_address'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'ownerId': json['owner_id'] == null ? undefined : json['owner_id'],
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'updatedAt': json['updated_at'] == null ? undefined : json['updated_at'],
    };
}
function DomainThermometerToJSON(json) {
    return DomainThermometerToJSONTyped(json, false);
}
function DomainThermometerToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'config': (0, DomainThermometerConfig_1.DomainThermometerConfigToJSON)(value['config']),
        'connected': value['connected'],
        'created_at': value['createdAt'],
        'id': value['id'],
        'ip_address': value['ipAddress'],
        'is_active': value['isActive'],
        'owner_id': value['ownerId'],
        'temperature': value['temperature'],
        'updated_at': value['updatedAt'],
    };
}
