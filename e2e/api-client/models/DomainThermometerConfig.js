"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Example API Doc
 * Describe your API
 *
 * The version of the OpenAPI document: SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfDomainThermometerConfig = instanceOfDomainThermometerConfig;
exports.DomainThermometerConfigFromJSON = DomainThermometerConfigFromJSON;
exports.DomainThermometerConfigFromJSONTyped = DomainThermometerConfigFromJSONTyped;
exports.DomainThermometerConfigToJSON = DomainThermometerConfigToJSON;
exports.DomainThermometerConfigToJSONTyped = DomainThermometerConfigToJSONTyped;
/**
 * Check if a given object implements the DomainThermometerConfig interface.
 */
function instanceOfDomainThermometerConfig(value) {
    return true;
}
function DomainThermometerConfigFromJSON(json) {
    return DomainThermometerConfigFromJSONTyped(json, false);
}
function DomainThermometerConfigFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'connection': json['connection'] == null ? undefined : json['connection'],
        'maxTemperature': json['max_temperature'] == null ? undefined : json['max_temperature'],
        'minTemperature': json['min_temperature'] == null ? undefined : json['min_temperature'],
    };
}
function DomainThermometerConfigToJSON(json) {
    return DomainThermometerConfigToJSONTyped(json, false);
}
function DomainThermometerConfigToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'connection': value['connection'],
        'max_temperature': value['maxTemperature'],
        'min_temperature': value['minTemperature'],
    };
}
