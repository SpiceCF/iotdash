"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * IOT DASHBOARD SENSOR MONITORING API
 * API FOR IOT DASHBOARD SENSOR MONITORING
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfThermometer = instanceOfThermometer;
exports.ThermometerFromJSON = ThermometerFromJSON;
exports.ThermometerFromJSONTyped = ThermometerFromJSONTyped;
exports.ThermometerToJSON = ThermometerToJSON;
exports.ThermometerToJSONTyped = ThermometerToJSONTyped;
var ThermometerConfig_1 = require("./ThermometerConfig");
/**
 * Check if a given object implements the Thermometer interface.
 */
function instanceOfThermometer(value) {
    return true;
}
function ThermometerFromJSON(json) {
    return ThermometerFromJSONTyped(json, false);
}
function ThermometerFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'] == null ? undefined : json['id'],
        'ownerId': json['owner_id'] == null ? undefined : json['owner_id'],
        'ipAddress': json['ip_address'] == null ? undefined : json['ip_address'],
        'connected': json['connected'] == null ? undefined : json['connected'],
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'config': json['config'] == null ? undefined : (0, ThermometerConfig_1.ThermometerConfigFromJSON)(json['config']),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
    };
}
function ThermometerToJSON(json) {
    return ThermometerToJSONTyped(json, false);
}
function ThermometerToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'temperature': value['temperature'],
        'is_active': value['isActive'],
        'config': (0, ThermometerConfig_1.ThermometerConfigToJSON)(value['config']),
    };
}
