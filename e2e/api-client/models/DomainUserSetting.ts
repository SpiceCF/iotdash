/* tslint:disable */
/* eslint-disable */
/**
 * Example API Doc
 * Describe your API
 *
 * The version of the OpenAPI document: SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DomainUserSetting
 */
export interface DomainUserSetting {
    /**
     * 
     * @type {object}
     * @memberof DomainUserSetting
     */
    createdAt?: object;
    /**
     * 
     * @type {object}
     * @memberof DomainUserSetting
     */
    id?: object;
    /**
     * 
     * @type {string}
     * @memberof DomainUserSetting
     */
    key?: string;
    /**
     * 
     * @type {object}
     * @memberof DomainUserSetting
     */
    ownerId?: object;
    /**
     * 
     * @type {object}
     * @memberof DomainUserSetting
     */
    updatedAt?: object;
    /**
     * 
     * @type {Array<number>}
     * @memberof DomainUserSetting
     */
    value?: Array<number>;
}

/**
 * Check if a given object implements the DomainUserSetting interface.
 */
export function instanceOfDomainUserSetting(value: object): value is DomainUserSetting {
    return true;
}

export function DomainUserSettingFromJSON(json: any): DomainUserSetting {
    return DomainUserSettingFromJSONTyped(json, false);
}

export function DomainUserSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainUserSetting {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'id': json['id'] == null ? undefined : json['id'],
        'key': json['key'] == null ? undefined : json['key'],
        'ownerId': json['owner_id'] == null ? undefined : json['owner_id'],
        'updatedAt': json['updated_at'] == null ? undefined : json['updated_at'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

  export function DomainUserSettingToJSON(json: any): DomainUserSetting {
      return DomainUserSettingToJSONTyped(json, false);
  }

  export function DomainUserSettingToJSONTyped(value?: DomainUserSetting | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': value['createdAt'],
        'id': value['id'],
        'key': value['key'],
        'owner_id': value['ownerId'],
        'updated_at': value['updatedAt'],
        'value': value['value'],
    };
}

