/* tslint:disable */
/* eslint-disable */
/**
 * IOT DASHBOARD SENSOR MONITORING API
 * API FOR IOT DASHBOARD SENSOR MONITORING
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SensorConfig } from './SensorConfig';
import {
    SensorConfigFromJSON,
    SensorConfigFromJSONTyped,
    SensorConfigToJSON,
    SensorConfigToJSONTyped,
} from './SensorConfig';

/**
 * 
 * @export
 * @interface Sensor
 */
export interface Sensor {
    /**
     * The ID of the sensor
     * @type {string}
     * @memberof Sensor
     */
    readonly id?: string;
    /**
     * The device ID of the sensor
     * @type {string}
     * @memberof Sensor
     */
    readonly deviceId?: string;
    /**
     * The name of the sensor
     * @type {string}
     * @memberof Sensor
     */
    name?: string;
    /**
     * The type of the sensor
     * @type {string}
     * @memberof Sensor
     */
    type?: SensorTypeEnum;
    /**
     * The configs of the sensor
     * @type {Array<SensorConfig>}
     * @memberof Sensor
     */
    readonly configs?: Array<SensorConfig>;
    /**
     * The creation date of the sensor
     * @type {Date}
     * @memberof Sensor
     */
    readonly createdAt?: Date;
    /**
     * The update date of the sensor
     * @type {Date}
     * @memberof Sensor
     */
    readonly updatedAt?: Date;
}


/**
 * @export
 */
export const SensorTypeEnum = {
    Thermometer: 'thermometer'
} as const;
export type SensorTypeEnum = typeof SensorTypeEnum[keyof typeof SensorTypeEnum];


/**
 * Check if a given object implements the Sensor interface.
 */
export function instanceOfSensor(value: object): value is Sensor {
    return true;
}

export function SensorFromJSON(json: any): Sensor {
    return SensorFromJSONTyped(json, false);
}

export function SensorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Sensor {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'deviceId': json['device_id'] == null ? undefined : json['device_id'],
        'name': json['name'] == null ? undefined : json['name'],
        'type': json['type'] == null ? undefined : json['type'],
        'configs': json['configs'] == null ? undefined : ((json['configs'] as Array<any>).map(SensorConfigFromJSON)),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
    };
}

  export function SensorToJSON(json: any): Sensor {
      return SensorToJSONTyped(json, false);
  }

  export function SensorToJSONTyped(value?: Omit<Sensor, 'id'|'device_id'|'configs'|'created_at'|'updated_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'type': value['type'],
    };
}

