"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Example API Doc
 * Describe your API
 *
 * The version of the OpenAPI document: SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfSimulatorhandlerUpdateThermometerConfigRequest = instanceOfSimulatorhandlerUpdateThermometerConfigRequest;
exports.SimulatorhandlerUpdateThermometerConfigRequestFromJSON = SimulatorhandlerUpdateThermometerConfigRequestFromJSON;
exports.SimulatorhandlerUpdateThermometerConfigRequestFromJSONTyped = SimulatorhandlerUpdateThermometerConfigRequestFromJSONTyped;
exports.SimulatorhandlerUpdateThermometerConfigRequestToJSON = SimulatorhandlerUpdateThermometerConfigRequestToJSON;
exports.SimulatorhandlerUpdateThermometerConfigRequestToJSONTyped = SimulatorhandlerUpdateThermometerConfigRequestToJSONTyped;
var DomainThermometerConfig_1 = require("./DomainThermometerConfig");
/**
 * Check if a given object implements the SimulatorhandlerUpdateThermometerConfigRequest interface.
 */
function instanceOfSimulatorhandlerUpdateThermometerConfigRequest(value) {
    return true;
}
function SimulatorhandlerUpdateThermometerConfigRequestFromJSON(json) {
    return SimulatorhandlerUpdateThermometerConfigRequestFromJSONTyped(json, false);
}
function SimulatorhandlerUpdateThermometerConfigRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'config': json['config'] == null ? undefined : (0, DomainThermometerConfig_1.DomainThermometerConfigFromJSON)(json['config']),
    };
}
function SimulatorhandlerUpdateThermometerConfigRequestToJSON(json) {
    return SimulatorhandlerUpdateThermometerConfigRequestToJSONTyped(json, false);
}
function SimulatorhandlerUpdateThermometerConfigRequestToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'config': (0, DomainThermometerConfig_1.DomainThermometerConfigToJSON)(value['config']),
    };
}
