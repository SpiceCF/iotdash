/* tslint:disable */
/* eslint-disable */
/**
 * IOT DASHBOARD SENSOR MONITORING API
 * API FOR IOT DASHBOARD SENSOR MONITORING
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ThermometerConfig } from './ThermometerConfig';
import {
    ThermometerConfigFromJSON,
    ThermometerConfigFromJSONTyped,
    ThermometerConfigToJSON,
    ThermometerConfigToJSONTyped,
} from './ThermometerConfig';

/**
 * 
 * @export
 * @interface Thermometer
 */
export interface Thermometer {
    /**
     * The ID of the thermometer
     * @type {string}
     * @memberof Thermometer
     */
    readonly id?: string;
    /**
     * The owner ID of the thermometer
     * @type {string}
     * @memberof Thermometer
     */
    readonly ownerId?: string;
    /**
     * The IP address of the thermometer
     * @type {string}
     * @memberof Thermometer
     */
    readonly ipAddress?: string;
    /**
     * The connection status of the thermometer
     * @type {boolean}
     * @memberof Thermometer
     */
    readonly connected?: boolean;
    /**
     * The temperature of the thermometer
     * @type {number}
     * @memberof Thermometer
     */
    temperature?: number;
    /**
     * The active status of the thermometer
     * @type {boolean}
     * @memberof Thermometer
     */
    isActive?: boolean;
    /**
     * 
     * @type {ThermometerConfig}
     * @memberof Thermometer
     */
    config?: ThermometerConfig;
    /**
     * The creation date of the thermometer
     * @type {Date}
     * @memberof Thermometer
     */
    readonly createdAt?: Date;
    /**
     * The update date of the thermometer
     * @type {Date}
     * @memberof Thermometer
     */
    readonly updatedAt?: Date;
}

/**
 * Check if a given object implements the Thermometer interface.
 */
export function instanceOfThermometer(value: object): value is Thermometer {
    return true;
}

export function ThermometerFromJSON(json: any): Thermometer {
    return ThermometerFromJSONTyped(json, false);
}

export function ThermometerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Thermometer {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'ownerId': json['owner_id'] == null ? undefined : json['owner_id'],
        'ipAddress': json['ip_address'] == null ? undefined : json['ip_address'],
        'connected': json['connected'] == null ? undefined : json['connected'],
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'config': json['config'] == null ? undefined : ThermometerConfigFromJSON(json['config']),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
    };
}

  export function ThermometerToJSON(json: any): Thermometer {
      return ThermometerToJSONTyped(json, false);
  }

  export function ThermometerToJSONTyped(value?: Omit<Thermometer, 'id'|'owner_id'|'ip_address'|'connected'|'created_at'|'updated_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'temperature': value['temperature'],
        'is_active': value['isActive'],
        'config': ThermometerConfigToJSON(value['config']),
    };
}

