/* tslint:disable */
/* eslint-disable */
/**
 * Example API Doc
 * Describe your API
 *
 * The version of the OpenAPI document: SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DomainUserSetting } from './DomainUserSetting';
import {
    DomainUserSettingFromJSON,
    DomainUserSettingFromJSONTyped,
    DomainUserSettingToJSON,
    DomainUserSettingToJSONTyped,
} from './DomainUserSetting';
import type { DomainSensor } from './DomainSensor';
import {
    DomainSensorFromJSON,
    DomainSensorFromJSONTyped,
    DomainSensorToJSON,
    DomainSensorToJSONTyped,
} from './DomainSensor';
import type { DomainThermometer } from './DomainThermometer';
import {
    DomainThermometerFromJSON,
    DomainThermometerFromJSONTyped,
    DomainThermometerToJSON,
    DomainThermometerToJSONTyped,
} from './DomainThermometer';

/**
 * 
 * @export
 * @interface DomainUser
 */
export interface DomainUser {
    /**
     * 
     * @type {object}
     * @memberof DomainUser
     */
    createdAt?: object;
    /**
     * 
     * @type {string}
     * @memberof DomainUser
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainUser
     */
    fullName?: string;
    /**
     * 
     * @type {object}
     * @memberof DomainUser
     */
    id?: object;
    /**
     * 
     * @type {string}
     * @memberof DomainUser
     */
    password?: string;
    /**
     * 
     * @type {Array<DomainSensor>}
     * @memberof DomainUser
     */
    sensors?: Array<DomainSensor>;
    /**
     * 
     * @type {Array<DomainUserSetting>}
     * @memberof DomainUser
     */
    settings?: Array<DomainUserSetting>;
    /**
     * 
     * @type {Array<DomainThermometer>}
     * @memberof DomainUser
     */
    thermometers?: Array<DomainThermometer>;
    /**
     * 
     * @type {object}
     * @memberof DomainUser
     */
    updatedAt?: object;
    /**
     * 
     * @type {string}
     * @memberof DomainUser
     */
    username?: string;
}

/**
 * Check if a given object implements the DomainUser interface.
 */
export function instanceOfDomainUser(value: object): value is DomainUser {
    return true;
}

export function DomainUserFromJSON(json: any): DomainUser {
    return DomainUserFromJSONTyped(json, false);
}

export function DomainUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainUser {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'email': json['email'] == null ? undefined : json['email'],
        'fullName': json['full_name'] == null ? undefined : json['full_name'],
        'id': json['id'] == null ? undefined : json['id'],
        'password': json['password'] == null ? undefined : json['password'],
        'sensors': json['sensors'] == null ? undefined : ((json['sensors'] as Array<any>).map(DomainSensorFromJSON)),
        'settings': json['settings'] == null ? undefined : ((json['settings'] as Array<any>).map(DomainUserSettingFromJSON)),
        'thermometers': json['thermometers'] == null ? undefined : ((json['thermometers'] as Array<any>).map(DomainThermometerFromJSON)),
        'updatedAt': json['updated_at'] == null ? undefined : json['updated_at'],
        'username': json['username'] == null ? undefined : json['username'],
    };
}

  export function DomainUserToJSON(json: any): DomainUser {
      return DomainUserToJSONTyped(json, false);
  }

  export function DomainUserToJSONTyped(value?: DomainUser | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': value['createdAt'],
        'email': value['email'],
        'full_name': value['fullName'],
        'id': value['id'],
        'password': value['password'],
        'sensors': value['sensors'] == null ? undefined : ((value['sensors'] as Array<any>).map(DomainSensorToJSON)),
        'settings': value['settings'] == null ? undefined : ((value['settings'] as Array<any>).map(DomainUserSettingToJSON)),
        'thermometers': value['thermometers'] == null ? undefined : ((value['thermometers'] as Array<any>).map(DomainThermometerToJSON)),
        'updated_at': value['updatedAt'],
        'username': value['username'],
    };
}

