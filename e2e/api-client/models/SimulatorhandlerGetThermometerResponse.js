"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Example API Doc
 * Describe your API
 *
 * The version of the OpenAPI document: SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfSimulatorhandlerGetThermometerResponse = instanceOfSimulatorhandlerGetThermometerResponse;
exports.SimulatorhandlerGetThermometerResponseFromJSON = SimulatorhandlerGetThermometerResponseFromJSON;
exports.SimulatorhandlerGetThermometerResponseFromJSONTyped = SimulatorhandlerGetThermometerResponseFromJSONTyped;
exports.SimulatorhandlerGetThermometerResponseToJSON = SimulatorhandlerGetThermometerResponseToJSON;
exports.SimulatorhandlerGetThermometerResponseToJSONTyped = SimulatorhandlerGetThermometerResponseToJSONTyped;
var DomainThermometer_1 = require("./DomainThermometer");
/**
 * Check if a given object implements the SimulatorhandlerGetThermometerResponse interface.
 */
function instanceOfSimulatorhandlerGetThermometerResponse(value) {
    return true;
}
function SimulatorhandlerGetThermometerResponseFromJSON(json) {
    return SimulatorhandlerGetThermometerResponseFromJSONTyped(json, false);
}
function SimulatorhandlerGetThermometerResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'data': json['data'] == null ? undefined : (0, DomainThermometer_1.DomainThermometerFromJSON)(json['data']),
        'status': json['status'] == null ? undefined : json['status'],
    };
}
function SimulatorhandlerGetThermometerResponseToJSON(json) {
    return SimulatorhandlerGetThermometerResponseToJSONTyped(json, false);
}
function SimulatorhandlerGetThermometerResponseToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'data': (0, DomainThermometer_1.DomainThermometerToJSON)(value['data']),
        'status': value['status'],
    };
}
