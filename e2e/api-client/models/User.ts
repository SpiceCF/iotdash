/* tslint:disable */
/* eslint-disable */
/**
 * IOT DASHBOARD SENSOR MONITORING API
 * API FOR IOT DASHBOARD SENSOR MONITORING
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Thermometer } from './Thermometer';
import {
    ThermometerFromJSON,
    ThermometerFromJSONTyped,
    ThermometerToJSON,
    ThermometerToJSONTyped,
} from './Thermometer';
import type { Sensor } from './Sensor';
import {
    SensorFromJSON,
    SensorFromJSONTyped,
    SensorToJSON,
    SensorToJSONTyped,
} from './Sensor';
import type { UserSetting } from './UserSetting';
import {
    UserSettingFromJSON,
    UserSettingFromJSONTyped,
    UserSettingToJSON,
    UserSettingToJSONTyped,
} from './UserSetting';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * The ID of the user
     * @type {string}
     * @memberof User
     */
    readonly id?: string;
    /**
     * The full name of the user
     * @type {string}
     * @memberof User
     */
    fullName?: string;
    /**
     * The email of the user
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * The username of the user
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * The password of the user
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * The settings of the user
     * @type {Array<UserSetting>}
     * @memberof User
     */
    readonly settings?: Array<UserSetting>;
    /**
     * The sensors of the user
     * @type {Array<Sensor>}
     * @memberof User
     */
    readonly sensors?: Array<Sensor>;
    /**
     * The thermometers of the user
     * @type {Array<Thermometer>}
     * @memberof User
     */
    readonly thermometers?: Array<Thermometer>;
    /**
     * The creation date of the user
     * @type {Date}
     * @memberof User
     */
    readonly createdAt?: Date;
    /**
     * The update date of the user
     * @type {Date}
     * @memberof User
     */
    readonly updatedAt?: Date;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'fullName': json['full_name'] == null ? undefined : json['full_name'],
        'email': json['email'] == null ? undefined : json['email'],
        'username': json['username'] == null ? undefined : json['username'],
        'password': json['password'] == null ? undefined : json['password'],
        'settings': json['settings'] == null ? undefined : ((json['settings'] as Array<any>).map(UserSettingFromJSON)),
        'sensors': json['sensors'] == null ? undefined : ((json['sensors'] as Array<any>).map(SensorFromJSON)),
        'thermometers': json['thermometers'] == null ? undefined : ((json['thermometers'] as Array<any>).map(ThermometerFromJSON)),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
    };
}

  export function UserToJSON(json: any): User {
      return UserToJSONTyped(json, false);
  }

  export function UserToJSONTyped(value?: Omit<User, 'id'|'settings'|'sensors'|'thermometers'|'created_at'|'updated_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'full_name': value['fullName'],
        'email': value['email'],
        'username': value['username'],
        'password': value['password'],
    };
}

