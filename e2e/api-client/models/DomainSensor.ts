/* tslint:disable */
/* eslint-disable */
/**
 * Example API Doc
 * Describe your API
 *
 * The version of the OpenAPI document: SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DomainSensorConfig } from './DomainSensorConfig';
import {
    DomainSensorConfigFromJSON,
    DomainSensorConfigFromJSONTyped,
    DomainSensorConfigToJSON,
    DomainSensorConfigToJSONTyped,
} from './DomainSensorConfig';

/**
 * 
 * @export
 * @interface DomainSensor
 */
export interface DomainSensor {
    /**
     * 
     * @type {Array<DomainSensorConfig>}
     * @memberof DomainSensor
     */
    configs?: Array<DomainSensorConfig>;
    /**
     * 
     * @type {object}
     * @memberof DomainSensor
     */
    createdAt?: object;
    /**
     * 
     * @type {object}
     * @memberof DomainSensor
     */
    deviceId?: object;
    /**
     * 
     * @type {object}
     * @memberof DomainSensor
     */
    id?: object;
    /**
     * 
     * @type {string}
     * @memberof DomainSensor
     */
    name?: string;
    /**
     * 
     * @type {object}
     * @memberof DomainSensor
     */
    ownerId?: object;
    /**
     * 
     * @type {string}
     * @memberof DomainSensor
     */
    type?: string;
    /**
     * 
     * @type {object}
     * @memberof DomainSensor
     */
    updatedAt?: object;
}

/**
 * Check if a given object implements the DomainSensor interface.
 */
export function instanceOfDomainSensor(value: object): value is DomainSensor {
    return true;
}

export function DomainSensorFromJSON(json: any): DomainSensor {
    return DomainSensorFromJSONTyped(json, false);
}

export function DomainSensorFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainSensor {
    if (json == null) {
        return json;
    }
    return {
        
        'configs': json['configs'] == null ? undefined : ((json['configs'] as Array<any>).map(DomainSensorConfigFromJSON)),
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'deviceId': json['device_id'] == null ? undefined : json['device_id'],
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'ownerId': json['owner_id'] == null ? undefined : json['owner_id'],
        'type': json['type'] == null ? undefined : json['type'],
        'updatedAt': json['updated_at'] == null ? undefined : json['updated_at'],
    };
}

  export function DomainSensorToJSON(json: any): DomainSensor {
      return DomainSensorToJSONTyped(json, false);
  }

  export function DomainSensorToJSONTyped(value?: DomainSensor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'configs': value['configs'] == null ? undefined : ((value['configs'] as Array<any>).map(DomainSensorConfigToJSON)),
        'created_at': value['createdAt'],
        'device_id': value['deviceId'],
        'id': value['id'],
        'name': value['name'],
        'owner_id': value['ownerId'],
        'type': value['type'],
        'updated_at': value['updatedAt'],
    };
}

