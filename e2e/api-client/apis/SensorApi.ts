/* tslint:disable */
/* eslint-disable */
/**
 * Example API Doc
 * Describe your API
 *
 * The version of the OpenAPI document: SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SensorhandlerCreateSensorRequest,
  SensorhandlerCreateSensorResponse,
  SensorhandlerCreateThermometerLogRequest,
  SensorhandlerCreateThermometerLogResponse,
  SensorhandlerListSensorLogsResponse,
  SensorhandlerListSensorsResponse,
} from '../models/index';
import {
    SensorhandlerCreateSensorRequestFromJSON,
    SensorhandlerCreateSensorRequestToJSON,
    SensorhandlerCreateSensorResponseFromJSON,
    SensorhandlerCreateSensorResponseToJSON,
    SensorhandlerCreateThermometerLogRequestFromJSON,
    SensorhandlerCreateThermometerLogRequestToJSON,
    SensorhandlerCreateThermometerLogResponseFromJSON,
    SensorhandlerCreateThermometerLogResponseToJSON,
    SensorhandlerListSensorLogsResponseFromJSON,
    SensorhandlerListSensorLogsResponseToJSON,
    SensorhandlerListSensorsResponseFromJSON,
    SensorhandlerListSensorsResponseToJSON,
} from '../models/index';

export interface GetSensorsIdLogsRequest {
    id: string;
}

export interface PostSensorsRequest {
    body: SensorhandlerCreateSensorRequest;
}

export interface PostSensorsThermometerLogsRequest {
    body: SensorhandlerCreateThermometerLogRequest;
}

/**
 * 
 */
export class SensorApi extends runtime.BaseAPI {

    /**
     * List sensors
     * List sensors
     */
    async getSensorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SensorhandlerListSensorsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/sensors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorhandlerListSensorsResponseFromJSON(jsonValue));
    }

    /**
     * List sensors
     * List sensors
     */
    async getSensors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SensorhandlerListSensorsResponse> {
        const response = await this.getSensorsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List sensor logs
     * List sensor logs
     */
    async getSensorsIdLogsRaw(requestParameters: GetSensorsIdLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SensorhandlerListSensorLogsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSensorsIdLogs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/sensors/{id}/logs`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorhandlerListSensorLogsResponseFromJSON(jsonValue));
    }

    /**
     * List sensor logs
     * List sensor logs
     */
    async getSensorsIdLogs(requestParameters: GetSensorsIdLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SensorhandlerListSensorLogsResponse> {
        const response = await this.getSensorsIdLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create sensor
     * Create sensor
     */
    async postSensorsRaw(requestParameters: PostSensorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SensorhandlerCreateSensorResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling postSensors().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/sensors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SensorhandlerCreateSensorRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorhandlerCreateSensorResponseFromJSON(jsonValue));
    }

    /**
     * Create sensor
     * Create sensor
     */
    async postSensors(requestParameters: PostSensorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SensorhandlerCreateSensorResponse> {
        const response = await this.postSensorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create thermometer log
     * Create thermometer log
     */
    async postSensorsThermometerLogsRaw(requestParameters: PostSensorsThermometerLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SensorhandlerCreateThermometerLogResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling postSensorsThermometerLogs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/sensors/thermometer/logs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SensorhandlerCreateThermometerLogRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorhandlerCreateThermometerLogResponseFromJSON(jsonValue));
    }

    /**
     * Create thermometer log
     * Create thermometer log
     */
    async postSensorsThermometerLogs(requestParameters: PostSensorsThermometerLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SensorhandlerCreateThermometerLogResponse> {
        const response = await this.postSensorsThermometerLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
