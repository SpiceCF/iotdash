// Code generated by MockGen. DO NOT EDIT.
// Source: sensor.go
//
// Generated by this command:
//
//	mockgen -source=sensor.go -destination=mock/sensor.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	domain "iotdash/backend/internal/core/domain"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSensorRepository is a mock of SensorRepository interface.
type MockSensorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSensorRepositoryMockRecorder
	isgomock struct{}
}

// MockSensorRepositoryMockRecorder is the mock recorder for MockSensorRepository.
type MockSensorRepositoryMockRecorder struct {
	mock *MockSensorRepository
}

// NewMockSensorRepository creates a new mock instance.
func NewMockSensorRepository(ctrl *gomock.Controller) *MockSensorRepository {
	mock := &MockSensorRepository{ctrl: ctrl}
	mock.recorder = &MockSensorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSensorRepository) EXPECT() *MockSensorRepositoryMockRecorder {
	return m.recorder
}

// CreateSensor mocks base method.
func (m *MockSensorRepository) CreateSensor(sensor *domain.Sensor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSensor", sensor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSensor indicates an expected call of CreateSensor.
func (mr *MockSensorRepositoryMockRecorder) CreateSensor(sensor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSensor", reflect.TypeOf((*MockSensorRepository)(nil).CreateSensor), sensor)
}

// GetSensorByID mocks base method.
func (m *MockSensorRepository) GetSensorByID(id uuid.UUID) (*domain.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorByID", id)
	ret0, _ := ret[0].(*domain.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorByID indicates an expected call of GetSensorByID.
func (mr *MockSensorRepositoryMockRecorder) GetSensorByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorByID", reflect.TypeOf((*MockSensorRepository)(nil).GetSensorByID), id)
}

// ListSensorsByUserID mocks base method.
func (m *MockSensorRepository) ListSensorsByUserID(userID uuid.UUID) ([]*domain.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSensorsByUserID", userID)
	ret0, _ := ret[0].([]*domain.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSensorsByUserID indicates an expected call of ListSensorsByUserID.
func (mr *MockSensorRepositoryMockRecorder) ListSensorsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSensorsByUserID", reflect.TypeOf((*MockSensorRepository)(nil).ListSensorsByUserID), userID)
}

// MockSensorService is a mock of SensorService interface.
type MockSensorService struct {
	ctrl     *gomock.Controller
	recorder *MockSensorServiceMockRecorder
	isgomock struct{}
}

// MockSensorServiceMockRecorder is the mock recorder for MockSensorService.
type MockSensorServiceMockRecorder struct {
	mock *MockSensorService
}

// NewMockSensorService creates a new mock instance.
func NewMockSensorService(ctrl *gomock.Controller) *MockSensorService {
	mock := &MockSensorService{ctrl: ctrl}
	mock.recorder = &MockSensorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSensorService) EXPECT() *MockSensorServiceMockRecorder {
	return m.recorder
}

// CreateSensor mocks base method.
func (m *MockSensorService) CreateSensor(sensor *domain.Sensor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSensor", sensor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSensor indicates an expected call of CreateSensor.
func (mr *MockSensorServiceMockRecorder) CreateSensor(sensor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSensor", reflect.TypeOf((*MockSensorService)(nil).CreateSensor), sensor)
}

// CreateSensorLog mocks base method.
func (m *MockSensorService) CreateSensorLog(sensorLog *domain.SensorLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSensorLog", sensorLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSensorLog indicates an expected call of CreateSensorLog.
func (mr *MockSensorServiceMockRecorder) CreateSensorLog(sensorLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSensorLog", reflect.TypeOf((*MockSensorService)(nil).CreateSensorLog), sensorLog)
}

// GetSensorByID mocks base method.
func (m *MockSensorService) GetSensorByID(id uuid.UUID) (*domain.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorByID", id)
	ret0, _ := ret[0].(*domain.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorByID indicates an expected call of GetSensorByID.
func (mr *MockSensorServiceMockRecorder) GetSensorByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorByID", reflect.TypeOf((*MockSensorService)(nil).GetSensorByID), id)
}

// ListSensorsByUserID mocks base method.
func (m *MockSensorService) ListSensorsByUserID(userID uuid.UUID) ([]*domain.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSensorsByUserID", userID)
	ret0, _ := ret[0].([]*domain.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSensorsByUserID indicates an expected call of ListSensorsByUserID.
func (mr *MockSensorServiceMockRecorder) ListSensorsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSensorsByUserID", reflect.TypeOf((*MockSensorService)(nil).ListSensorsByUserID), userID)
}
