// Code generated by MockGen. DO NOT EDIT.
// Source: thermometer.go
//
// Generated by this command:
//
//	mockgen -source=thermometer.go -destination=mock/thermometer.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	domain "iotdash/backend/internal/core/domain"
	thermoengine "iotdash/backend/pkg/thermoengine"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockThermometerRepository is a mock of ThermometerRepository interface.
type MockThermometerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThermometerRepositoryMockRecorder
	isgomock struct{}
}

// MockThermometerRepositoryMockRecorder is the mock recorder for MockThermometerRepository.
type MockThermometerRepositoryMockRecorder struct {
	mock *MockThermometerRepository
}

// NewMockThermometerRepository creates a new mock instance.
func NewMockThermometerRepository(ctrl *gomock.Controller) *MockThermometerRepository {
	mock := &MockThermometerRepository{ctrl: ctrl}
	mock.recorder = &MockThermometerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThermometerRepository) EXPECT() *MockThermometerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockThermometerRepository) Create(tm *domain.Thermometer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockThermometerRepositoryMockRecorder) Create(tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockThermometerRepository)(nil).Create), tm)
}

// GetByID mocks base method.
func (m *MockThermometerRepository) GetByID(id uuid.UUID) (*domain.Thermometer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Thermometer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockThermometerRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockThermometerRepository)(nil).GetByID), id)
}

// ListByOwnerID mocks base method.
func (m *MockThermometerRepository) ListByOwnerID(ownerID uuid.UUID) ([]*domain.Thermometer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOwnerID", ownerID)
	ret0, _ := ret[0].([]*domain.Thermometer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByOwnerID indicates an expected call of ListByOwnerID.
func (mr *MockThermometerRepositoryMockRecorder) ListByOwnerID(ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOwnerID", reflect.TypeOf((*MockThermometerRepository)(nil).ListByOwnerID), ownerID)
}

// Update mocks base method.
func (m *MockThermometerRepository) Update(tm *domain.Thermometer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockThermometerRepositoryMockRecorder) Update(tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockThermometerRepository)(nil).Update), tm)
}

// MockThermometerService is a mock of ThermometerService interface.
type MockThermometerService struct {
	ctrl     *gomock.Controller
	recorder *MockThermometerServiceMockRecorder
	isgomock struct{}
}

// MockThermometerServiceMockRecorder is the mock recorder for MockThermometerService.
type MockThermometerServiceMockRecorder struct {
	mock *MockThermometerService
}

// NewMockThermometerService creates a new mock instance.
func NewMockThermometerService(ctrl *gomock.Controller) *MockThermometerService {
	mock := &MockThermometerService{ctrl: ctrl}
	mock.recorder = &MockThermometerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThermometerService) EXPECT() *MockThermometerServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockThermometerService) Create(ownerID uuid.UUID) (*domain.Thermometer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ownerID)
	ret0, _ := ret[0].(*domain.Thermometer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockThermometerServiceMockRecorder) Create(ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockThermometerService)(nil).Create), ownerID)
}

// GetByID mocks base method.
func (m *MockThermometerService) GetByID(id uuid.UUID) (*domain.Thermometer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Thermometer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockThermometerServiceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockThermometerService)(nil).GetByID), id)
}

// ListByOwnerID mocks base method.
func (m *MockThermometerService) ListByOwnerID(ownerID uuid.UUID) ([]*domain.Thermometer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOwnerID", ownerID)
	ret0, _ := ret[0].([]*domain.Thermometer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByOwnerID indicates an expected call of ListByOwnerID.
func (mr *MockThermometerServiceMockRecorder) ListByOwnerID(ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOwnerID", reflect.TypeOf((*MockThermometerService)(nil).ListByOwnerID), ownerID)
}

// Update mocks base method.
func (m *MockThermometerService) Update(tm *domain.Thermometer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockThermometerServiceMockRecorder) Update(tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockThermometerService)(nil).Update), tm)
}

// MockThermometerSimulatorService is a mock of ThermometerSimulatorService interface.
type MockThermometerSimulatorService struct {
	ctrl     *gomock.Controller
	recorder *MockThermometerSimulatorServiceMockRecorder
	isgomock struct{}
}

// MockThermometerSimulatorServiceMockRecorder is the mock recorder for MockThermometerSimulatorService.
type MockThermometerSimulatorServiceMockRecorder struct {
	mock *MockThermometerSimulatorService
}

// NewMockThermometerSimulatorService creates a new mock instance.
func NewMockThermometerSimulatorService(ctrl *gomock.Controller) *MockThermometerSimulatorService {
	mock := &MockThermometerSimulatorService{ctrl: ctrl}
	mock.recorder = &MockThermometerSimulatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThermometerSimulatorService) EXPECT() *MockThermometerSimulatorServiceMockRecorder {
	return m.recorder
}

// GetEngine mocks base method.
func (m *MockThermometerSimulatorService) GetEngine(id uuid.UUID) (*thermoengine.ThermoEngine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngine", id)
	ret0, _ := ret[0].(*thermoengine.ThermoEngine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEngine indicates an expected call of GetEngine.
func (mr *MockThermometerSimulatorServiceMockRecorder) GetEngine(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngine", reflect.TypeOf((*MockThermometerSimulatorService)(nil).GetEngine), id)
}

// GetEngines mocks base method.
func (m *MockThermometerSimulatorService) GetEngines() map[uuid.UUID]*thermoengine.ThermoEngine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngines")
	ret0, _ := ret[0].(map[uuid.UUID]*thermoengine.ThermoEngine)
	return ret0
}

// GetEngines indicates an expected call of GetEngines.
func (mr *MockThermometerSimulatorServiceMockRecorder) GetEngines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngines", reflect.TypeOf((*MockThermometerSimulatorService)(nil).GetEngines))
}

// LoadThermometers mocks base method.
func (m *MockThermometerSimulatorService) LoadThermometers(thermometers []*domain.Thermometer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadThermometers", thermometers)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadThermometers indicates an expected call of LoadThermometers.
func (mr *MockThermometerSimulatorServiceMockRecorder) LoadThermometers(thermometers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadThermometers", reflect.TypeOf((*MockThermometerSimulatorService)(nil).LoadThermometers), thermometers)
}

// StartAllEngines mocks base method.
func (m *MockThermometerSimulatorService) StartAllEngines() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAllEngines")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartAllEngines indicates an expected call of StartAllEngines.
func (mr *MockThermometerSimulatorServiceMockRecorder) StartAllEngines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAllEngines", reflect.TypeOf((*MockThermometerSimulatorService)(nil).StartAllEngines))
}

// StartEngine mocks base method.
func (m *MockThermometerSimulatorService) StartEngine(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEngine", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartEngine indicates an expected call of StartEngine.
func (mr *MockThermometerSimulatorServiceMockRecorder) StartEngine(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEngine", reflect.TypeOf((*MockThermometerSimulatorService)(nil).StartEngine), id)
}

// StopAllEngines mocks base method.
func (m *MockThermometerSimulatorService) StopAllEngines() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAllEngines")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopAllEngines indicates an expected call of StopAllEngines.
func (mr *MockThermometerSimulatorServiceMockRecorder) StopAllEngines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAllEngines", reflect.TypeOf((*MockThermometerSimulatorService)(nil).StopAllEngines))
}

// StopEngine mocks base method.
func (m *MockThermometerSimulatorService) StopEngine(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEngine", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopEngine indicates an expected call of StopEngine.
func (mr *MockThermometerSimulatorServiceMockRecorder) StopEngine(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEngine", reflect.TypeOf((*MockThermometerSimulatorService)(nil).StopEngine), id)
}
